{"mappings":"sSAAA,IAAAA,EAAAC,EAAA,S,uCAKA,MAAMC,EAAO,CACXC,eAAgBC,SAASC,cAAc,uBACvCC,QAASF,SAASC,cAAc,iBAChCE,eAAgBH,SAASC,cAAc,sBAwDzC,SAASG,IACHC,OAAOC,WAAa,MACtBR,EAAKK,eAAeI,eAAe,CACjCC,SAAU,U,CAShB,SAASC,EAA2BC,GAClCZ,EAAKC,eACFE,cAAc,wBACdU,UAAUC,OAAO,uBACpBF,EAAOC,UAAUE,IAAI,sB,CAQvB,SAASC,EAAYC,GACnB,OAAOA,EAAKC,IAAIC,EAAAC,gBAAgBC,KAAK,G,CAOvC,SAASC,EAAmBC,GAC1B,MAAMC,EAAeD,EAAKE,MAAM,KAC1BC,EAAkBF,EACrBG,OAAO,EAAGH,EAAaI,OAAS,GAChCP,KAAK,KACFQ,EAAkBL,EAAaM,IAAG,GAExC9B,EAAKK,eAAe0B,YAAcL,EAAkB,IACpD1B,EAAKK,eAAe2B,mBAClB,YACA,sDAAsDH,W,EA9F1D,EAAA/B,EAAAmC,WAAiBC,MAAKjB,IACpBjB,EAAKC,eAAe+B,mBAClB,YACoBf,EAuCnBC,KACC,EAACiB,UAAEA,KACD,4CAA4CA,WAE/Cd,KAAK,IA1CP,IAGHrB,EAAKC,eAAemC,iBAAiB,SAQrCC,eAAuBC,GACjBA,EAAE1B,OAAOC,UAAU0B,SAAS,gBAC9B5B,EAA2B2B,EAAE1B,QAC7BN,IACAgB,EAAmBgB,EAAE1B,OAAOmB,aAE5B/B,EAAKI,QAAQoC,UAAYxB,QACjB,EAAAyB,EAAAR,SAAYK,EAAE1B,OAAOmB,cAE7B/B,EAAKI,QAAQS,UAAUE,IAAI,mBAClBuB,EAAE1B,OAAOC,UAAU0B,SAAS,sBACrC5B,EAA2B2B,EAAE1B,QAC7BN,IACAgB,EAAmB,uBACnB,EAAAoB,EAAAT,YAGF,M,IAxBFjC,EAAKI,QAAQgC,iBAAiB,SA+F9BC,eAA6BM,GAC3B,IAAKA,EAAE/B,OAAOC,UAAU0B,SAAS,oBAC/B,OAEF,MAAMK,EAAeD,EAAE/B,OAAOiC,QAAQC,aAElCvC,OAAOC,WAAa,KACtBF,IAEAC,OAAOwC,OAAO,CACZC,IAAK,EACLtC,SAAU,WAIdY,EAAmBsB,GAEnB,IAAI5C,EAAKC,eAAegD,UAAUC,SAAQZ,IACpCA,EAAEP,cAAgBa,EACpBN,EAAEzB,UAAUE,IAAI,uBACPuB,EAAEzB,UAAU0B,SAAS,wBAC9BD,EAAEzB,UAAUC,OAAO,sBAAsB,IAG7Cd,EAAKI,QAAQoC,UAAYxB,QAAkB,EAAAyB,EAAAR,SAAYW,IACvD5C,EAAKI,QAAQS,UAAUE,IAAI,iB,uFC5I7B,IAAAoC,EAAApD,EAAA,S,IAeAqD,EANAf,iBAGE,aAFoBc,EAAAlB,QAAMoB,IAP1B,4DAOkDpC,KAC7BqC,MAAK,CAACC,EAAGC,IAAMD,EAAEpB,UAAUsB,cAAcD,EAAErB,Y,qFCXlE,IAAAgB,EAAApD,EAAA,S,IAeA2D,EALArB,eAA2Bb,GAEzB,aADoB2B,EAAAlB,QAAMoB,IAR1B,+DAQkD7B,IAAeP,I","sources":["src/js/category.js","src/js/api/categoryList.js","src/js/api/categoryBooks.js"],"sourcesContent":["import getAllCategory from './api/categoryList';\nimport getAllBooks from './api/categoryBooks';\nimport { bookItemMarcup } from './bookItemMarcup';\nimport getBooks from './api/topBooks';\n\nconst refs = {\n  categoryListEl: document.querySelector('.js-list-categories'),\n  booksEl: document.querySelector('.js-all-books'),\n  categoryNameEl: document.querySelector('.js-category-name'),\n};\n\n// Function for marcup categories on sidebar\ngetAllCategory().then(data => {\n  refs.categoryListEl.insertAdjacentHTML(\n    'beforeend',\n    markupAllCategories(data)\n  );\n});\n\nrefs.categoryListEl.addEventListener('click', onClick);\nrefs.booksEl.addEventListener('click', onClickButton);\n\n/**\n * After click on 'categoryListEl'\n * @param {HTMLUListElement} e\n * @returns null\n */\nasync function onClick(e) {\n  if (e.target.classList.contains('js-category')) {\n    changeClassCurrentCategory(e.target);\n    scrollUp();\n    markupNameCategory(e.target.textContent);\n\n    refs.booksEl.innerHTML = markupBooks(\n      await getAllBooks(e.target.textContent)\n    );\n    refs.booksEl.classList.add('category__list');\n  } else if (e.target.classList.contains('js-main-category')) {\n    changeClassCurrentCategory(e.target);\n    scrollUp();\n    markupNameCategory('Best Sellers Books');\n    getBooks();\n  }\n\n  return;\n}\n\n/**\n * Markup categories in sidebar\n * @param {Array} arr\n * @returns string\n */\nfunction markupAllCategories(arr) {\n  return arr\n    .map(\n      ({ list_name }) =>\n        `<li class=\"categories__item js-category\">${list_name}</li>`\n    )\n    .join('');\n}\n\n/**\n * After click on category in sidebar, scroll to up (mobile, tablet)\n */\nfunction scrollUp() {\n  if (window.innerWidth < 1440) {\n    refs.categoryNameEl.scrollIntoView({\n      behavior: 'smooth',\n    });\n  }\n}\n\n/**\n * Change current category after click\n * @param {HTMLLIElement} target\n */\nfunction changeClassCurrentCategory(target) {\n  refs.categoryListEl\n    .querySelector('.categories__current')\n    .classList.remove('categories__current');\n  target.classList.add('categories__current');\n}\n\n/**\n * Markup books in main content\n * @param {Array} data\n * @returns String\n */\nfunction markupBooks(data) {\n  return data.map(bookItemMarcup).join('');\n}\n\n/**\n * Markup name category in main content\n * @param {String} name\n */\nfunction markupNameCategory(name) {\n  const categoryName = name.split(' ');\n  const categoryNameOne = categoryName\n    .splice(0, categoryName.length - 1)\n    .join(' ');\n  const categoryNameTwo = categoryName.at(-1);\n\n  refs.categoryNameEl.textContent = categoryNameOne + ' ';\n  refs.categoryNameEl.insertAdjacentHTML(\n    'beforeend',\n    `<span class=\"category_name category__name--violet\">${categoryNameTwo}</span>`\n  );\n}\n\n/**\n * After click on button \"See more\", marcup all books with cirrent category on main contant\n * @param {HTMLUListElement} e\n * @returns null\n */\nasync function onClickButton(e) {\n  if (!e.target.classList.contains('js-action-button')) {\n    return;\n  }\n  const nameCategory = e.target.dataset.categoryname;\n\n  if (window.innerWidth < 1440) {\n    scrollUp();\n  } else {\n    window.scroll({\n      top: 0,\n      behavior: 'smooth',\n    });\n  }\n\n  markupNameCategory(nameCategory);\n\n  [...refs.categoryListEl.children].forEach(e => {\n    if (e.textContent === nameCategory) {\n      e.classList.add('categories__current');\n    } else if (e.classList.contains('categories__current')) {\n      e.classList.remove('categories__current');\n    }\n  });\n  refs.booksEl.innerHTML = markupBooks(await getAllBooks(nameCategory));\n  refs.booksEl.classList.add('category__list');\n}\n","import axios from 'axios';\n\nconst LINK_All_CATEGORY =\n  'https://books-backend.p.goit.global/books/category-list';\n\n/**\n * Get sort array with all categories\n * @returns Array with all categories\n */\nasync function getAllCategory() {\n  const data = (await axios.get(LINK_All_CATEGORY)).data;\n  const sortArr = data.sort((a, b) => a.list_name.localeCompare(b.list_name));\n  return sortArr;\n}\n\nexport default getAllCategory;\n","import axios from 'axios';\n\nconst LINK_ONE_CATEGORY =\n  'https://books-backend.p.goit.global/books/category?category=';\n\n/**\n * Get all books with category\n * @param {String} categoryName\n * @returns Array with books\n */\nasync function getAllBooks(categoryName) {\n  const data = (await axios.get(LINK_ONE_CATEGORY + categoryName)).data;\n  return data;\n}\n\nexport default getAllBooks;\n"],"names":["$kMbtw","parcelRequire","$ea48f741b5bc75f2$var$refs","categoryListEl","document","querySelector","booksEl","categoryNameEl","$ea48f741b5bc75f2$var$scrollUp","window","innerWidth","scrollIntoView","behavior","$ea48f741b5bc75f2$var$changeClassCurrentCategory","target","classList","remove","add","$ea48f741b5bc75f2$var$markupBooks","data","map","$fQD9h","bookItemMarcup","join","$ea48f741b5bc75f2$var$markupNameCategory","name","categoryName","split","categoryNameOne","splice","length","categoryNameTwo","at","textContent","insertAdjacentHTML","default","then","list_name","addEventListener","async","e","contains","innerHTML","$jkoa3","$7jOSx","e1","nameCategory","dataset","categoryname","scroll","top","children","forEach","$2shzp","$f20131177bd8e321$export$2e2bcd8739ae039","get","sort","a","b","localeCompare","$e122a076dd7af730$export$2e2bcd8739ae039"],"version":3,"file":"category.86bf3a6d.js.map"}